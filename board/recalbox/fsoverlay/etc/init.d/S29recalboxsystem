#!/bin/bash

#essetting=/recalbox/scripts/essetting.sh
#systemsetting=/recalbox/scripts/systemsetting.sh
systemsetting="python /usr/lib/python2.7/site-packages/configgen/settings/recalboxSettings.pyc"
config_script=/recalbox/scripts/recalbox-config.sh
wpafile=/etc/wpa_supplicant/wpa_supplicant.conf

log=/root/recalbox.log


case "$1" in
  start)
	echo "`logtime` : starting new log " > $log

	# Volume 
	settingsVolume="`$systemsetting -command load -key audio.volume`"
	if [ "$settingsVolume" != "" ];then
		echo "`logtime` : setting audio volume to $settingsVolume" >> $log
        	eval $config_script "volume" "$settingsVolume" >> $log
	fi

	# Wifi
	settings_ssid="`$systemsetting -command load -key wifi.ssid`"
	settings_key="`$systemsetting -command load -key wifi.key`"

	if [[ "$settings_ssid" != "" ]] && [[ "$settings_key" != "" ]] ;then
		cat $wpafile | grep network >> $log
                if [ "$?" != "0" ]; then
                        echo "`logtime` : creating network entry in $wpafile" >> $log
                        echo -e "network={\n\tssid=\"\"\n\tpsk=\"\"\n}" >> $wpafile
                fi
                sed -i "s/ssid=\".*\"/ssid=\"$settings_ssid\"/g" $wpafile
                sed -i "s/psk=\".*\"/psk=\"$settings_key\"/g" $wpafile	
		echo "`logtime` : updated wifi settings : ssid=$settings_ssid key=$settings_key" >> $log
	fi

	# Audio output
	settingsAudio="`$systemsetting -command load -key audio.device`"
	if [[ "$settingsAudio" == "" ]];then
        		settingsAudio="auto"
	fi
	echo "`logtime` : setting audio to $settingsAudio" >> $log
	eval $config_script "audio" "$settingsAudio" >> $log

	# GPIO mk
	settings_gpio_mk="`$systemsetting -command load -key controllers.gpio.enabled`"
	if [ "$settings_gpio_mk" == "1" ];then
	        settings_gpio_map="`$systemsetting -command load -key controllers.gpio.args`"
		[ "$settings_gpio_map" == "" ] && settings_gpio_map="map=1,2"
		echo "`logtime` : enabling mk_arcade_joystick_rpi" >> $log
        	eval $config_script "module" "load" mk_arcade_joystick_rpi "$settings_gpio_map" >> $log
	else
		# mk disabled let's check for db9
		settings_db9="`$systemsetting -command load -key controllers.db9.enabled`"
	        if [ "$settings_db9" == "1" ];then
        	        settings_db9_map="`$systemsetting -command load -key db9_args`"
                	echo "`logtime` : enabling db9" >> $log
                	eval $config_script "module" "load" db9_gpio_rpi "$settings_db9_map" >> $log
		else 
			# db9 and mk disabled let's check for gamecon
                	settings_gamecon="`$systemsetting -command load -key controllers.gamecon.enabled`"
                	if [ "$settings_gamecon" == "1" ];then
                        	settings_gamecon_map="`$systemsetting -command load -key controllers.gamecon.args`"
                        	echo "`logtime` : enabling gamecon" >> $log
                        	eval $config_script "module" "load" gamecon_gpio_rpi "$settings_gamecon_map" >> $log
			fi
		fi
	fi
	# Keyboard and lang
        settings_lang="`$systemsetting -command load -key system.language`"
        settings_kb="`$systemsetting -command load -key system.kblayout`"
        if [[ "$settings_kb" != "" ]];then
                echo "`logtime` : setting keyboard layout to ${settings_kb}" >> $log
		loadkeys "$settings_kb" >> $log
        else
                keyboardmap=`echo "$settings_lang" | cut -c1-2`
		if [[ "$keyboardmap" != "" ]]; then
                	echo "`logtime` : setting keyboard layout to ${keyboardmap}" >> $log
                	loadkeys "$keyboardmap" >> $log
		fi
        fi

	# Xbox controllers
        settings_xbox="`$systemsetting -command load -key controllers.xboxdrv.enabled`"
        settings_xbox_nb="`$systemsetting -command load -key controllers.xboxdrv.nbcontrols`"
        if [[ "$settings_xbox" == "1" ]];then
                echo "`logtime` : setting xboxdrv" >> $log
                if [[ "$settings_xbox_nb" == "1" ]];then
                        /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
                elif [[ "$settings_xbox_nb" == "2" ]];then
                        /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
                elif [[ "$settings_xbox_nb" == "3" ]];then
                        /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --next-controller --id 2 --led 4 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
                elif [[ "$settings_xbox_nb" == "4" ]];then
                        /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --next-controller --id 2 --led 4 --deadzone 4000 --silent --trigger-as-button --next-controller --id 3 --led 5 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
                fi
        fi
        # Timezone
        settings_timezone="`$systemsetting -command load -key system.timezone`"
        if [[ "$settings_timezone" != "" && -f "/usr/share/zoneinfo/$settings_timezone" ]];then
                echo "`logtime` : setting timezone to $settings_timezone" >> $log
                echo "$settings_timezone" > /etc/timezone
                ln -sf "/usr/share/zoneinfo/$settings_timezone" /etc/localtime
        fi
        # Hostname
        settings_hostname="`$systemsetting -command load -key system.hostname`"
        if [[ "$settings_hostname" != "" ]];then
                echo "`logtime` : setting hostname to $settings_hostname" >> $log
                hostname "$settings_hostname"
        fi
	;;
  stop)
	;;
  restart|reload)
	;;
  *)
esac

exit $?


