#!/bin/sh

###
# SHARECONFFILE
# can contain :
# INTERNAL     => /dev/mmcblk0p3
# RAM          => tmpfs
# ANYEXTERNAL  => any device found not starting by /dev/mmcblk0p (use it when you've several usb keys, but plug only one at a time)
# DEV [FSUUID] => a device having the FSUID uuid
###

SHARECONFFILE="/boot/recalbox.conf"
INTERNALDEVICE="/dev/mmcblk0p3"
INTERNALDEVICETYPE="ext4" # faster than waiting udev to initialize to get the type
MAXTRY=5
NTRY=0

# a recalbox is about 40000 files in *.xz
# we've not time to compute this value before upgrading
# let's keep a marge to have a value always under 100% (that's just for the percentage)
NB_FILES_TARGET=45000

##### BUT FIRST, create the internal partition if it doesn't exist
# command that can be used for test to remove the 3rd partition : parted -s -m /dev/mmcblk0 rm 3
# create the internal partition if it doesn't exist
#
# we don't remove data ;  only create a new partition if p3 is missing, and some free space is available only at the end of the disk
#
if ! test -e /dev/mmcblk0p3
then
    # but the system partition exists
    if test -e /dev/mmcblk0p2
    then
	# create the internal partition
	PSTART=$(parted -s /dev/mmcblk0 -m unit b print free | tail -1 | grep -E 'free;$' | cut -d: -f 2)
	if test -n "${PSTART}"
	then
	    parted -s /dev/mmcblk0 -m unit b mkpart primary "${PSTART}" 100%
	    if test -e /dev/mmcblk0p3
	    then
		#mkfs.vfat -F 32 -n SHARE /dev/mmcblk0p3 # if you replace this line, please change the INTERNALDEVICETYPE variable too in consequence
		#fsck.fat /dev/mmcblk0p3 -a
		mkfs.ext4 /dev/mmcblk0p3 -q -F -L SHARE
		e2fsck -f -p /dev/mmcblk0p3
	    fi
	fi
    fi
fi
#####

mountDeviceOrFallback() {
    DEVICE=$1
    TDEVICE=$2
    RECALBOXFULLFS="/var/recalboxfs"
    FALLBACK=1

    if test -n "${DEVICE}"
    then
	if mkdir -p "${RECALBOXFULLFS}"
	then
	    if /recalbox/scripts/recalbox-mount.sh "${TDEVICE}" 1 "${DEVICE}" "${RECALBOXFULLFS}"
	    then
		if mkdir -p "${RECALBOXFULLFS}/recalbox"
		then
		    if mount "${RECALBOXFULLFS}/recalbox" "/recalbox/share" -o "noatime"
		    then
			FALLBACK=0
		    fi
		fi
	    fi
	fi
    fi

    if test "${FALLBACK}" = 1
    then
	if ! /recalbox/scripts/recalbox-mount.sh "${INTERNALDEVICETYPE}" 1 "${INTERNALDEVICE}" /recalbox/share
	then
	    mount -t tmpfs -o size=128M tmpfs /recalbox/share
	fi
    fi
}

scr_init_upgrade() {
    fbv -f -i "/recalbox/system/resources/splash/logo-upgrade.png" &
    # go down for people that don't see the up of the screen
    (
	echo
	echo
	echo
	echo
	echo
    ) > /dev/tty0
}

scr_msg_upgrade() {
    printf "\r%20s%10s" "${1}" " " > /dev/tty0 # with spaces at the begining for screen not displaying the left ; and spaces on right to erase old msg
}

do_upgrade() {
    BOOTTAR="/recalbox/share/system/upgrade/boot.tar.xz"
    ROOTTAR="/recalbox/share/system/upgrade/root.tar.xz"

    # percentage
    touch /tmp/upgrade.files
    (
	sleep 1 # wait screen background initialized before
	while true
	do
	    NF=$(cat /tmp/upgrade.files | wc -l)
	    let NP=${NF}00/${NB_FILES_TARGET}
	    scr_msg_upgrade "${NP}%"
	    sleep 10
	done
    ) &
    
    # upgrading /boot
    EXIT_CODE=1
    date
    echo "Upgrading /boot"
    if mount -o remount,rw /boot
    then
	if (cd /boot && \
	    cp cmdline.txt cmdline.txt.upgrade && \
	    cp config.txt config.txt.upgrade && \
	    xz -dc < "${BOOTTAR}" | tar xvf - >> /tmp/upgrade.files && \
	    mv config.txt.upgrade config.txt && \
	    mv cmdline.txt.upgrade cmdline.txt )
	then
	    EXIT_CODE=0
	fi
	sync
    fi
    test "${EXIT_CODE}" = 1 && return 1 # don't insist if /boot failed to upgrade

    date

    # upgrading /root
    EXIT_CODE=1
    date
    echo "Upgrading /"
    if mount -o remount,rw /
    then
	if (cd / && \
	    cp ./etc/fstab ./etc/fstab.upgrade && \
	    xz -dc < "${ROOTTAR}" | tar xvf - >> /tmp/upgrade.files && \
	    mv ./etc/fstab.upgrade ./etc/fstab)
	then
	    EXIT_CODE=0
	fi
	sync
    fi
    test "${EXIT_CODE}" = 1 && return 1 # don't insist if /root failed to upgrade

    echo "Upgrade ended successfully."
    date
    return 0
}

RMODE=$(cat "${SHARECONFFILE}") # it can fails, it will go in fallback

if echo "${RMODE}" | grep -qE '^DEV '
then
    MODE="DEV"
    UUID=$(echo "${RMODE}" | sed -e s+'^DEV '++)
else
    MODE=${RMODE}
fi

case "${MODE}" in
    "DEV")
	LDEVICE=$(blkid | grep " UUID=\"${UUID}\"")
	while test -z "${LDEVICE}" -a "${NTRY}" -lt "${MAXTRY}" # wait the device that can take some seconds after udev started
	do
	    let NTRY++
	    sleep 1
	    LDEVICE=$(blkid | grep " UUID=\"${UUID}\"")
	done
	DEVICE=$(echo "${LDEVICE}" | sed -e s+'^\([^:]*\):.*$'+'\1'+)
	TDEVICE=$(echo "${LDEVICE}" | sed -e s+'^.* TYPE="\([^"]*\)"$'+'\1'+)
	mountDeviceOrFallback "${DEVICE}" "${TDEVICE}"
	;;
    "ANYEXTERNAL")
	LDEVICE=$(blkid | grep -vE '^/dev/mmcblk' | head -1)
	while test -z "${LDEVICE}" -a "${NTRY}" -lt "${MAXTRY}" # wait the device that can take some seconds after udev started
	do
	    let NTRY++
	    sleep 1
	    LDEVICE=$(blkid | grep -vE '^/dev/mmcblk' | head -1)
	done
	DEVICE=$(echo "${LDEVICE}" | sed -e s+'^\([^:]*\):.*$'+'\1'+)
	TDEVICE=$(echo "${LDEVICE}" | sed -e s+'^.* TYPE="\([^"]*\)"$'+'\1'+)
	mountDeviceOrFallback "${DEVICE}" "${TDEVICE}"
	;;
    "RAM")
	mount -t tmpfs -o size=128M tmpfs /recalbox/share
	;;
    "INTERNAL"|*)
	if ! /recalbox/scripts/recalbox-mount.sh "${INTERNALDEVICETYPE}" 1 "${INTERNALDEVICE}" /recalbox/share
	then
	    # fallback
	    # the internal partition is no more required in fact
	    mount -t tmpfs -o size=128M tmpfs /recalbox/share
	fi
	;;
esac

# what about doing an upgrade ?
if test -e "/recalbox/share/system/upgrade/boot.tar.xz" -a -e "/recalbox/share/system/upgrade/root.tar.xz"
then
    # let's go
    scr_init_upgrade
    do_upgrade > /recalbox/share/system/upgrade/upgrade.out.log 2> /recalbox/share/system/upgrade/upgrade.err.log
    
    # remove to not apply it indefinitly, even if it fails
    rm "/recalbox/share/system/upgrade/boot.tar.xz" "/recalbox/share/system/upgrade/root.tar.xz"
    
    # rebooting now
    shutdown -r now
fi

# now, let mount delayed usbmount devices
ls /var/run/usbmount.delay |
    while read RULE
    do
	RTYPE=$(echo "${RULE}" | sed -e s+'^[0-9]*\.'++)
	# source the udev context and apply the usbmount
	(. "/var/run/usbmount.delay/${RULE}"
	 /usr/share/usbmount/usbmount "${RTYPE}"
	 rm "/var/run/usbmount.delay/${RULE}")
    done
touch /var/run/recalbox.share.mounted # reenable standard usbmount
