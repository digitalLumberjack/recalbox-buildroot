#!/bin/bash

if test "$1" != "start"
then
  exit 0
fi

source /recalbox/scripts/recalbox-includes.sh

IN=/recalbox/share_init
OUT=/recalbox/share
# force the creation of some directories
for DIR in cheats \
           system/.cache \
           system/.config/lirc \
           system/.emulationstation/themes \
           system/bluetooth \
           system/configs \
           system/logs
do
    if test ! -e "$OUT""/""$DIR"
    then
        mkdir -p "$OUT""/""$DIR"
    fi
done

# directories / files to copy when initializing the user data
#
# NO UPDATE IS POSSIBLE ON THESE DIRECTORIES WHEN RECALBOX IS UPDATED
#
# there are almost empty, it's just for the structure
# the user can delete the directory, it will recreate the structure
# the user can delete files, files will not be recreated
for FILE in music bios extractions kodi saves screenshots \
            system/.config/lirc/lircd.conf \
            system/.emulationstation/{es_input.cfg,es_settings.cfg} \
            system/{.hatari,.kodi} \
            system/configs/{fba,moonlight,mupen64,ppsspp,reicast,retroarch,shadersets,xarcade2jstick,dosbox,dolphin-emu,advancemame} \
            system/recalbox.conf \
            bios/mame2003
do
    # not wanted for kodi
    test -e "$IN""/""$FILE" && test ! -e "$OUT""/""$FILE" && cp -r "$IN""/""$FILE" "$OUT""/""$FILE"
done

# directories to force directories exists
# files are linked
#
# ONLY NEW DIRECTORIES ARE UPDATED WHEN RECALBOX IS UPDATED
#
# the user can't delete any directory, otherwise, it will recreate it, with link inside
# the user can delete links and add its own files
# to reset the directory or update it, the user has to remove the directory (we are unable to differenciate new files from recalbox update from a file removed by the user)
for DIR in roms roms/mame/mame2003
do
    if test ! -e "$OUT""/""$DIR"
    then
	if mkdir "$OUT""/""$DIR"
	then
	    find "$IN""/""$DIR" -mindepth 1 -maxdepth 1 -type d |
		while read SUBDIR
		do
		    BNAME=$(basename "$SUBDIR")
		    TDIR="$OUT""/""$DIR""/""$BNAME"
		    if test ! -e "$TDIR" # ASSUME THAT PARENTS ARE LISTED BEFORE CHILDREN
		    then
			cp -r "$SUBDIR" "$TDIR"
		    fi
		done
	fi
    fi
done

# recalbox.conf : upgrade if necessary
doRbxConfUpgrade

# ssh : create the ssh key while the -R option of dropbear try a chown or an operation which is not permitted on fat32
if ! test -e /recalbox/share/system/ssh
then
    mkdir -p /recalbox/share/system/ssh
    dropbearkey -t ecdsa -f /recalbox/share/system/ssh/dropbear_ecdsa_host_key
    dropbearkey -t rsa   -f /recalbox/share/system/ssh/dropbear_rsa_host_key
    dropbearkey -t dss   -f /recalbox/share/system/ssh/dropbear_dss_host_key
fi

# bluetooth : now gotta tar/untar, the directory structure for bluez5 is more complex
# once untar, delete the cache folder. The exclude tar option of busybox is dreadful
btTar=/recalbox/share/system/bluetooth/bluetooth.tar
tar xvf "$btTar" -C / 2>/dev/null 

# udev : create a link for rules persistance
mkdir -p /recalbox/share/system/udev/rules.d
rm -rf /run/udev/rules.d
ln -s /recalbox/share/system/udev/rules.d/ /run/udev/

# Update recalbox.conf
cfgIn=$IN/system/recalbox.conf
cfgIn=$IN/system/recalbox.conf
cfgOut=$OUT/system/recalbox.conf
rbxVersion=/recalbox/recalbox.version
curVersion=$OUT/system/logs/lastrecalbox.conf.update
LOG=$OUT/system/logs/recalbox.log
skipped=(system. kodi. wifi. audio.)
forced=(controllers.ps3.driver)

# Shall we run the recalbox.conf update process ?
currentVersion=$(cat $rbxVersion)
lastConfUpdate=$(cat $curVersion 2>/dev/null)

[ "$currentVersion" == "$lastConfUpdate" ] && echo "recalbox.conf already up-to-date" >> $LOG && exit 0

echo "UPDATE : recalbox.conf" >> $LOG

cp $cfgOut ${cfgOut}-pre-$(cat /recalbox/recalbox.updateversion)
grep -v '^[#;]\|^$' $cfgIn | while read -r property
do
    skip=0
    name=$(echo $property | cut -d '=' -f 1)

    # Should we force the value ?
    for  propname in "${forced[@]}"
    do
        # Should protect . in the $property
        nameRegExp=$(echo $name | sed 's/\./\\\./g')
        echo $name | grep -q "^$propname" && echo "FORCING : $property" >> $LOG && sed -i "s/^$nameRegExp=.*/$property/g" $cfgOut
    done

    # Should we skip this value ?
    for  propname in "${skipped[@]}"
    do
        echo $name | grep -q "^$propname" && echo "SKIPPING : $name" >> $LOG && skip=1 && break
    done
    [ $skip -eq 1 ] && continue

    # if the property doesn't exist, add it
    grep -q "$name" $cfgOut || ( echo "ADDING to $cfgOut : $property" >> $LOG ; echo "$property" >> $cfgOut )
done

# Update is done, set the right version number
cp $rbxVersion $curVersion

# END
